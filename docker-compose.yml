version: '3.8'

services:
  payment-service-app:
    build:
      context: ./payment-service-app
      dockerfile: Dockerfile
    image: payment-service-app:latest
    depends_on:
      - postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/payment-db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
    ports:
      - "8080:8081"

  x-payment-adapter-app:
    build:
      context: ./xpayment-adapter-app
      dockerfile: Dockerfile
    image: xpayment-adapter-app:latest
    ports:
      - "8082:8082"

#  xpayment-api-main:
#    build:
#      context: ./xpayment-api-main
#      dockerfile: Dockerfile
#    image: xpayment-api-main-xpayment-api:latest
#    ports:
#      - "9999:9999"

  postgres:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_USER: admin # имя пользователя
      POSTGRES_PASSWORD: secret # пароль
      POSTGRES_DB: payment-db # имя БД по умолчанию
    ports:
      - "5432:5432" # проброс порта PostgreSQL
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gmail.com # учётка для входа
      PGADMIN_DEFAULT_PASSWORD: admin # пароль для входа
    ports:
      - "8081:80" # UI будет доступен по localhost:8081
    depends_on:
      - postgres
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.3
    container_name: keycloak
    command:
      - start-dev
      - --http-port=8080
      - --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8085:8080"
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092" # для клиентов из docker-сети (Kafka UI, другие сервисы)
      - "9093:9093" # для внешних клиентов (ваш хост)
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9094
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # слушатели
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9093,CONTROLLER://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      # рекламируем: внутри докера - kafka:9092, снаружи - localhost:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      # брокеры общаются через PLAINTEXT (у вас кластер из одного узла)
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  rabbitmq:
    image: rabbitmq:4.1.4-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # для подключения клиентов к брокеру
      - "15672:15672" # для доступа к админке
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq_delayed_message_exchange-4.1.0.ez:/opt/rabbitmq/plugins/rabbitmq_delayed_message_exchange-4.1.0.ez # делаем доступным в контейнере файл плагина
    command: >
      bash -c "rabbitmq-plugins enable --offline rabbitmq_delayed_message_exchange && rabbitmq-server"
    restart: unless-stopped

volumes:
  pgdata:
  kafka_data:
  rabbitmq_data:
